               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Resource-specified definitions, if any
               ; (None)


               .segment begin "Framework"


               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]

                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck

               FwEmptyFunc:            ; Done
000b ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq

                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq

                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq

                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1

001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip

                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1

0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop

                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;




               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]

                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;




               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed




               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...




               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep




0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts

0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 0077                         dw          #simpleLmt70Adc/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 007a                         dw          #simpleLmt70Adc/execute
               pFwTaskTerminateFuncTable:
006a ---- 00ea                         dw          #simpleLmt70Adc/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)


               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: Simple LMT70 ADC"
               simpleLmt70Adc/cfg:
               simpleLmt70Adc/input:
               simpleLmt70Adc/output:
               simpleLmt70Adc/output/adcValue1:
0075 ---- 0000                         dw          #0
               simpleLmt70Adc/output/adcValue2:
0076 ---- 0000                         dw          #0
               simpleLmt70Adc/state:
               .segment end "Task: Simple LMT70 ADC"


               .segment begin "Task: Simple LMT70 ADC"
               simpleLmt70Adc/initialize:
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
0077 ---- 0001                         ld          R0, #1
0078 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               simpleLmt70Adc/initializeDone:
0079 ---- adb7                         rts




               simpleLmt70Adc/execute:
               ;? // Turn on T_ON1
               ;? gpioSetOutput(AUXIO_O_T_ON1);
007a ---- 770e                         iobset      #(7 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;?
               ;? // Wait for 1ms till LMT70 1 settles
               ;? fwDelayUs(1000, FW_DELAY_RANGE_1_MS);
007b ---- 70bc                         ld          R7, #(((1000 * 24 ) + ((1 << 7) - 1)) >> 7)
007c ---- 6007                         ld          R6, #7
007d ---- 14eb                         jsr         FwDelay
               ;?
               ;? //Disable scaling to use internal reference of 1.4785V
               ;? adcDisableInputScaling();
007e ---- 14f1                         jsr         AdcDisableInputScaling
               ;?
               ;? // Enable the ADC
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
007f ---- f502                         loop        #128, /id0108
0080 ---- fd47                         nop
0081 ---- fd47                         nop
0082 ---- fd47                         nop
               /id0108:
0083 ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
0084 ---- 1462                         jsr         AdiDdiAcquire
0085 ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
0086 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0088 ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0109:
0089 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
008a ---- a6fe                         biob0       /id0109
008b ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
008c ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
008d ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
008e ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
008f ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0090 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
0091 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0092 ---- fd47                         nop
0093 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0094 ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? // Sample the LMT70 temp sensor 1
               ;? adcSelectGpioInput(AUXIO_A_LMT70_IN); //DIO_7
0095 ---- 7005                         ld          R7, #5
0096 ---- 14f6                         jsr         AdccompbSelectGpioInput
               ;?
               ;? // Sample the ADC
               ;? S16 adcValue_n1;
               ;? S16 adcValue_n2;
               ;? S16 adcValue_n3;
               ;? S16 median;
               ;?
               ;? adcGenManualTrigger();
0097 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue_n1);
0098 ---- 001f                         ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0099 ---- 8b2c                         out         R0, [#IOP_EVCTL_SCEWEVSEL]
009a ---- fdb1                         wev1        #WEVSEL_PROG
009b ---- 8902                         in          R0, [#IOP_ANAIF_ADCFIFO]
               ;? adcGenManualTrigger();
009c ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue_n2);
009d ---- 101f                         ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
009e ---- 9b2c                         out         R1, [#IOP_EVCTL_SCEWEVSEL]
009f ---- fdb1                         wev1        #WEVSEL_PROG
00a0 ---- 9902                         in          R1, [#IOP_ANAIF_ADCFIFO]
               ;? adcGenManualTrigger();
00a1 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue_n3);
00a2 ---- 201f                         ld          R2, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00a3 ---- ab2c                         out         R2, [#IOP_EVCTL_SCEWEVSEL]
00a4 ---- fdb1                         wev1        #WEVSEL_PROG
00a5 ---- a902                         in          R2, [#IOP_ANAIF_ADCFIFO]
               ;?
               ;? if (adcValue_n1>adcValue_n2) {
00a6 ---- 8d29                         cmp         R0, R1
00a7 ---- fe09                         bles        /id0121
               ;?     if (adcValue_n2>adcValue_n3) {
00a8 ---- 9d2a                             cmp         R1, R2
00a9 ---- fe02                             bles        /id0125
               ;?         median = adcValue_n2;
00aa ---- 8d41                                 ld          R0, R1
               ;?     } else {
00ab ---- 04b0                             jmp         /id0128
               /id0125:
               ;?         if (adcValue_n3>adcValue_n1) {
00ac ---- ad28                                 cmp         R2, R0
00ad ---- fe01                                 bles        /id0130
               ;?             median = adcValue_n1;
               ;?         } else {
00ae ---- 04b0                                 jmp         /id0133
               /id0130:
               ;?             median = adcValue_n3;
00af ---- 8d42                                     ld          R0, R2
               ;?         }
               /id0133:
               ;?     }
               /id0128:
               ;? } else {
00b0 ---- 04b9                         jmp         /id0124
               /id0121:
               ;?     if (adcValue_n2<adcValue_n3) {
00b1 ---- 9d2a                             cmp         R1, R2
00b2 ---- e602                             bges        /id0136
               ;?         median = adcValue_n2;
00b3 ---- 8d41                                 ld          R0, R1
               ;?     } else {
00b4 ---- 04b9                             jmp         /id0139
               /id0136:
               ;?         if (adcValue_n3<adcValue_n1) {
00b5 ---- ad28                                 cmp         R2, R0
00b6 ---- e601                                 bges        /id0141
               ;?             median = adcValue_n1;
               ;?         } else {
00b7 ---- 04b9                                 jmp         /id0144
               /id0141:
               ;?             median = adcValue_n3;
00b8 ---- 8d42                                     ld          R0, R2
               ;?         }
               /id0144:
               ;?     }
               /id0139:
               ;? }
               /id0124:
               ;? output.adcValue1 = median;
00b9 ---- 0c75                         st          R0, [#simpleLmt70Adc/output/adcValue1]
               ;?
               ;? // Switch to T_ON2
               ;? gpioClearOutput(AUXIO_O_T_ON1);
00ba ---- 570e                         iobclr      #(7 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? gpioSetOutput(AUXIO_O_T_ON2);
00bb ---- 760e                         iobset      #(6 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (6 >> 3))]
               ;?
               ;? // Wait for 1ms till LMT70 2 settles
               ;? fwDelayUs(1000, FW_DELAY_RANGE_1_MS);
00bc ---- 70bc                         ld          R7, #(((1000 * 24 ) + ((1 << 7) - 1)) >> 7)
00bd ---- 6007                         ld          R6, #7
00be ---- 14eb                         jsr         FwDelay
               ;?
               ;? adcGenManualTrigger();
00bf ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue_n1);
00c0 ---- 001f                         ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00c1 ---- 8b2c                         out         R0, [#IOP_EVCTL_SCEWEVSEL]
00c2 ---- fdb1                         wev1        #WEVSEL_PROG
00c3 ---- 8902                         in          R0, [#IOP_ANAIF_ADCFIFO]
               ;? adcGenManualTrigger();
00c4 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue_n2);
00c5 ---- 101f                         ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00c6 ---- 9b2c                         out         R1, [#IOP_EVCTL_SCEWEVSEL]
00c7 ---- fdb1                         wev1        #WEVSEL_PROG
00c8 ---- 9902                         in          R1, [#IOP_ANAIF_ADCFIFO]
               ;? adcGenManualTrigger();
00c9 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue_n3);
00ca ---- 201f                         ld          R2, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00cb ---- ab2c                         out         R2, [#IOP_EVCTL_SCEWEVSEL]
00cc ---- fdb1                         wev1        #WEVSEL_PROG
00cd ---- a902                         in          R2, [#IOP_ANAIF_ADCFIFO]
               ;?
               ;? if (adcValue_n1>adcValue_n2) {
00ce ---- 8d29                         cmp         R0, R1
00cf ---- fe09                         bles        /id0156
               ;?     if (adcValue_n2>adcValue_n3) {
00d0 ---- 9d2a                             cmp         R1, R2
00d1 ---- fe02                             bles        /id0160
               ;?         median = adcValue_n2;
00d2 ---- 8d41                                 ld          R0, R1
               ;?     } else {
00d3 ---- 04d8                             jmp         /id0163
               /id0160:
               ;?         if (adcValue_n3>adcValue_n1) {
00d4 ---- ad28                                 cmp         R2, R0
00d5 ---- fe01                                 bles        /id0165
               ;?             median = adcValue_n1;
               ;?         } else {
00d6 ---- 04d8                                 jmp         /id0168
               /id0165:
               ;?             median = adcValue_n3;
00d7 ---- 8d42                                     ld          R0, R2
               ;?         }
               /id0168:
               ;?     }
               /id0163:
               ;? } else {
00d8 ---- 04e1                         jmp         /id0159
               /id0156:
               ;?     if (adcValue_n2<adcValue_n3) {
00d9 ---- 9d2a                             cmp         R1, R2
00da ---- e602                             bges        /id0171
               ;?         median = adcValue_n2;
00db ---- 8d41                                 ld          R0, R1
               ;?     } else {
00dc ---- 04e1                             jmp         /id0174
               /id0171:
               ;?         if (adcValue_n3<adcValue_n1) {
00dd ---- ad28                                 cmp         R2, R0
00de ---- e601                                 bges        /id0176
               ;?             median = adcValue_n1;
               ;?         } else {
00df ---- 04e1                                 jmp         /id0179
               /id0176:
               ;?             median = adcValue_n3;
00e0 ---- 8d42                                     ld          R0, R2
               ;?         }
               /id0179:
               ;?     }
               /id0174:
               ;? }
               /id0159:
               ;? output.adcValue2 = median;
00e1 ---- 0c76                         st          R0, [#simpleLmt70Adc/output/adcValue2]
               ;?
               ;? gpioClearOutput(AUXIO_O_T_ON2);
00e2 ---- 560e                         iobclr      #(6 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (6 >> 3))]
               ;?
               ;? // Disable the ADC
               ;? adcDisable();
00e3 ---- 1503                         jsr         AdcDisable
               ;?
               ;? fwGenAlertInterrupt();
00e4 ---- 086c                         ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00e5 ---- 8201                         or          R0, #(1 << 0)
00e6 ---- 0c6c                         st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?
               ;? // Schedule the next execution
               ;? fwScheduleTask(1);
00e7 ---- 0001                         ld          R0, #1
00e8 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               simpleLmt70Adc/executeDone:
00e9 ---- adb7                         rts




               simpleLmt70Adc/terminate:
               ;?
               simpleLmt70Adc/terminateDone:
00ea ---- adb7                         rts
               .segment end "Task: Simple LMT70 ADC"


               .segment begin "Procedure Libary"
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
00eb ---- fb0c                         out         R7, [#IOP_TIMER01_T0TARGET]

                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
00ec ---- eda4                         lsl         R6, #4
00ed ---- eb09                         out         R6, [#IOP_TIMER01_T0CFG]

                                       ; Start the timer, wait for it to trigger, and stop it
00ee ---- 640b                         iobset      #0, [#IOP_TIMER01_T0CTL]
00ef ---- cdb1                         wev1        #WEVSEL_TIMER0
00f0 ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               AdcDisableInputScaling:
                                       ; Disable the ADC input scaling
00f1 ---- 1462                         jsr         AdiDdiAcquire
00f2 ---- 7100                         ld          R7, #ADI16_ADC_SCALE_DIS
00f3 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
                                       ; Release the ADI interface
00f4 ---- 1465                         jsr         AdiDdiRelease

00f5 ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
00f6 ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
00f7 ---- 1462                         jsr         AdiDdiAcquire
00f8 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
00fa ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]

                                       ; Connect the specified GPIO
00fb 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
00fd ---- ed8f                         lsr         R6, R7
00fe ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]

                                       ; Ensure that it has taken effect
00ff ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0100 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
0101 ---- 1465                         jsr         AdiDdiRelease
0102 ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
0103 ---- 1462                         jsr         AdiDdiAcquire
0104 ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
0105 ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]

                                       ; Assert reset and disable the ADC
0106 ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
0107 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]

                                       ; Ensure that it has taken effect
0108 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0109 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
010a ---- 1465                         jsr         AdiDdiRelease

                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
010b ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]

                                       ; Disable the ADC data interface
010c ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]

010d ---- adb7                         rts
               .segment end "Procedure Libary"


; Generated by DESKTOP-SB0S8NL at 2019-05-16 12:18:20.259
